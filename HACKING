Coding style
============
We use the GIMP coding style in this project.

The GIMP coding style is defined as follows:

* There's a single space between the function name and the opening
  paren.
* Function names are lowercase, words separated by underscores.
* Macros and enums are all uppercase, words seperated by
  underscores.
* Types are all words capitalized, no separators between words.
* All functions in header files need to be prototyped.
* Indentation rules are GNU coding style, in particular:
  * 2 characters indentation level
  * Do not use tabs (of course your editor can accept the TAB key
    as a command, typically to indent the current line properly
    or to add spaces at the cursor until the next multiple of 8
    columns, but it should not put TAB characters in the file).
  * When editing files that still have TABs in them, make sure your
    editor interprets the TABs correctly, that is, has tab stops
    at 8 column intervals.
  * Opening braces are on a new line and indented one level.
  * Function header have the return type on one line, the name
    starting in the first column of the following line. All
    parameters are prototyped and there's a new line for each.

Version Number
--------------
It is made of major.minor.micro numbers. Releases with an odd minor version number are in an unstable branch, whose API and command line argument might change. (sometimes a lot) When the minor number is even, it means it's a stable branch, with only new features that don't break old ones, or bug fixes. 

The micro version indicates the origin of the release: even micro numbers are only used for released archives; odd micro numbers are only used on the Git repository.

The version number is located in configure.ac and must always be one micro number ahead, unless this is a tag. That means that if we have released 0.1.0, the version number in configure.ac must be 0.1.1 until we release 0.1.2, and so forth.
