#!/usr/bin/env python3

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import json
import os
import sys
from pyquid import Switcher, Quiddity, InfoTree
from typing import Any


def make_parser() -> argparse.ArgumentParser:
    argp = argparse.ArgumentParser(
        description="""Get information about available quiddities: properties, methods, signals, claw, infotree and description.
The result is json formatted, except for list-all (-a) and short-list (-l) options that provide only a list.

Note the "short-line" option (-l) is only valid when combined with one of p, m or s options.

Examples:
========
For the list of all quiddities installed on your system:
swquid-info -a

To list all properties available at startup for the videotestsrc quiddity:
swquid-info -lp videotestsrc

Display full documentation of the "width" property of a videotestsrc quiddity:
swquid-info -p videotestsrc.width

Display description of the "width" property of a videotestsrc quiddity:
swquid-info -p videotestsrc.width.description

Arguments:
=========
""", formatter_class=argparse.RawTextHelpFormatter)
    argp.add_argument("-a", "--list-all",
                      help="list all quiddity kinds", action="store_true")
    argp.add_argument("-p", "--properties",
                      help="list kind properties after initialization", action="store_true")
    argp.add_argument("-m", "--methods",
                      help="list kind methods after initialization", action="store_true")
    argp.add_argument("-s", "--signals",
                      help="list kind signals after initialization", action="store_true")
    argp.add_argument("-w", "--claws",
                      help="list information about shmdata possible connection", action="store_true")
    argp.add_argument("-i", "--infotree",
                      help="print the quiddity infotree, optionally with a branch path", action="store_true")
    argp.add_argument("-l", "--short-list", help="print only the list of properties, methods or signals.",
                      action="store_true")
    argp.add_argument("-k", "--kind-doc", help="print kind documentation", action="store_true")
    argp.add_argument("-d", "--debug", help="print debug log", action="store_true")
    argp.add_argument("-v", "--version", help="print switcher version", action="store_true")
    argp.add_argument(
        'quiddity_kind', help="You can add method or property or signal id for a shorter output", nargs='?')
    return argp


def main() -> None:
    argp = make_parser()
    args = argp.parse_args()

    # create a switcher.
    name = 'swquid-info' + str(os.getpid())
    sw = Switcher(name, debug=args.debug)

    if args.version:
        print(sw.version())
        return

    if args.list_all:
        kinds = sw.list_kinds()
        for it in kinds:
            print(it)
        return

    if not args.quiddity_kind:
        argp.print_help(sys.stderr)
        return

    user_request = args.quiddity_kind.split('.', 1)
    doc = InfoTree()
    try:
        quid = sw.create(user_request[0], config=InfoTree('{ "server_name" : "'+name+'" }'))
    except RuntimeError:
        print('quiddity kind "' + user_request[0] + '" could not be inspected', file=sys.stderr)
        exit(0)

    # print short list
    if (args.short_list and (args.properties or args.methods or args.signals)):
        res = []
        tree = InfoTree(quid.get_info_tree_as_json())
        if (args.properties):
            for it in tree.get_child_keys('.property.'):
                res.append(tree.get('.property.' + it + '.id'))
        elif (args.methods):
            for it in tree.get_child_keys('.method'):
                res.append(tree.get('.method.' + it + '.id'))
        elif (args.signals):
            for it in tree.get_child_keys('.signal'):
                res.append(tree.get('.signal.' + it + '.id'))
        for it in res:
            print(it)
        return

    # print tree
    if (args.infotree):
        branch = '.'
        if len(user_request) == 2:
            branch = user_request[1]
        doc = InfoTree(quid.get_info_tree_as_json(branch))
        parsed = json.loads(doc.json())
        print(json.dumps(parsed, indent=4, sort_keys=False))
        return

    # generate json
    if len(user_request) == 2:
        path = user_request[1]
    else:
        path = ''
    if (args.kind_doc):
        if (path):
            doc = InfoTree(sw.kind_doc(user_request[0] + '.' + user_request[1]))
        else:
            doc = InfoTree(sw.kind_doc(user_request[0]))
    elif (args.properties):
        print(path)
        doc = InfoTree(quid.get_info_tree_as_json('.property.' + path))
    elif (args.methods):
        doc = InfoTree(quid.get_info_tree_as_json('.method.' + path))
    elif (args.signals):
        doc = InfoTree(quid.get_info_tree_as_json('.signal.' + path))
    elif (args.claws):
        doc = quid.get_connection_specs()

    # print the doc
    parsed = json.loads(doc.json())
    print(json.dumps(parsed, indent=4, sort_keys=False))
    return


if __name__ == "__main__":
    main()
    exit(0)
