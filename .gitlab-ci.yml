variables:
  CTEST_OUTPUT_ON_FAILURE: '1'

stages:
  - test
  - coverage
  - package
  - deploy

#
# Test
#
Test Ubuntu 22.04:
  stage: test
  image: ubuntu:22.04
  script:
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - rm -rf build && mkdir build && cd build
    - cmake ..
    - make -j${nproc}
    - make test
  except:
    - develop
    - master

Test package Ubuntu 20.04:
  stage: test
  image: ubuntu:20.04
  script:
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - rm -rf build && mkdir build && cd build
    - cmake ..
    - make package_source_test
  only:
    - develop
    - master

#
# Coverage
#
coverage:
  stage: coverage
  image: ubuntu:20.04
  script: 
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends lcov zip
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - rm -rf build && mkdir build && cd build
    - cmake -DTEST_COVERAGE=ON ..
    - make -j$(nproc)
    - make check_coverage
    - zip -r coverage.zip coverage
    - mv coverage.zip ../
  artifacts:
    name: "shmdata_coverage_${CI_BUILD_REF_NAME}"
    paths:
    - "coverage.zip"
  only:
    - develop

#
# Package
#
Debian Package Ubuntu 20.04:
  stage: package
  image: ubuntu:20.04
  script: 
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends file
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - rm -rf build && mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr ..
    - make package
    - mv *.deb ../libshmdata_latest_amd64.deb
  artifacts:
    name: "shmdata_package_${CI_BUILD_REF_NAME}"
    paths:
    - libshmdata_latest_amd64.deb
  only:
    - master

#
# Gitlab pages
#
pages:
  stage: deploy
  image: ubuntu:20.04
  script:
    # Prepare the image
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends file
    # Build the new website
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends ca-certificates python3-pip git build-essential 
    - git clone https://gitlab.com/sat-mtl/documentation/shmdata.git shmdata-doc
    - pushd shmdata-doc
    - git pull origin master # Make sure to be up-to-date
    - pip install -U sphinx
    - pip install -r requirements.txt
    - make htmlgitlab
    - popd
    # Build the Doxygen
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev doxygen
    - mkdir build && pushd build && cmake .. && make doc
    - popd
    # Gather documentation together
    - mv shmdata-doc/public public
    - mv html public/doxygen
  artifacts:
    paths:
      - public
  only:
    - website
    - master


